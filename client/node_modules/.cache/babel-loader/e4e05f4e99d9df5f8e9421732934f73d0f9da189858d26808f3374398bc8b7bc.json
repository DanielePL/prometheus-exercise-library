{"ast":null,"code":"// OpenAI API Service for Exercise Search\nimport OpenAI from 'openai';\n\n// Initialize OpenAI client\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true // Only for development - move to backend in production\n});\n\n// System prompt for exercise search\nconst EXERCISE_SEARCH_PROMPT = `You are an expert fitness AI assistant specializing in exercise recommendations. \nYour job is to analyze natural language queries about exercises and return structured search parameters.\n\nGiven a user's search query, extract and return a JSON object with the following structure:\n{\n  \"intent\": \"exercise_search\",\n  \"muscleGroups\": [\"chest\", \"back\", \"legs\", \"shoulders\", \"arms\", \"core\", \"full body\"],\n  \"categories\": [\"strength\", \"bodyweight\", \"compound\", \"isolation\", \"explosive\", \"isometric\", \"cardio\"],\n  \"difficulty\": [\"beginner\", \"intermediate\", \"advanced\"],\n  \"equipment\": [\"none\", \"barbell\", \"dumbbell\", \"kettlebell\", \"machine\", \"cable\", \"resistance band\"],\n  \"keywords\": [\"specific\", \"exercise\", \"names\"],\n  \"searchTerms\": [\"processed\", \"search\", \"terms\"],\n  \"confidence\": 0.95\n}\n\nRules:\n1. Only include relevant fields that match the query\n2. Use exact values from the arrays above\n3. Include confidence score (0-1)\n4. If query is unclear, include multiple options\n5. Extract specific exercise names if mentioned\n6. Consider synonyms (e.g., \"pecs\" = chest, \"lats\" = back)\n\nExamples:\nQuery: \"chest exercises for beginners\"\nResponse: {\"muscleGroups\": [\"chest\"], \"difficulty\": [\"beginner\"], \"confidence\": 0.9}\n\nQuery: \"bodyweight exercises at home\"\nResponse: {\"equipment\": [\"none\"], \"categories\": [\"bodyweight\"], \"keywords\": [\"home\"], \"confidence\": 0.85}\n\nQuery: \"compound movements with barbell\"\nResponse: {\"categories\": [\"compound\"], \"equipment\": [\"barbell\"], \"confidence\": 0.9}`;\n\n// Analyze search query with OpenAI\nexport const analyzeSearchQuery = async query => {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-3.5-turbo\",\n      messages: [{\n        role: \"system\",\n        content: EXERCISE_SEARCH_PROMPT\n      }, {\n        role: \"user\",\n        content: `Analyze this exercise search query: \"${query}\"`\n      }],\n      temperature: 0.3,\n      max_tokens: 300\n    });\n    const analysisText = response.choices[0].message.content;\n    try {\n      // Parse the JSON response\n      const analysis = JSON.parse(analysisText);\n      return {\n        success: true,\n        analysis,\n        originalQuery: query\n      };\n    } catch (parseError) {\n      console.warn('Failed to parse OpenAI response as JSON:', analysisText);\n      return {\n        success: false,\n        error: 'Invalid response format',\n        fallback: true\n      };\n    }\n  } catch (error) {\n    console.error('OpenAI API error:', error);\n    return {\n      success: false,\n      error: error.message,\n      fallback: true\n    };\n  }\n};\n\n// Process exercises using AI analysis\nexport const processExercisesWithAI = async (exercises, aiAnalysis) => {\n  let results = [...exercises];\n  let scores = {};\n\n  // Initialize scores\n  exercises.forEach(exercise => {\n    scores[exercise.id] = 0;\n  });\n  const analysis = aiAnalysis.analysis;\n\n  // Score based on muscle groups\n  if (analysis.muscleGroups) {\n    analysis.muscleGroups.forEach(targetMuscle => {\n      exercises.forEach(exercise => {\n        const exerciseMuscle = exercise.muscleGroup.toLowerCase();\n        if (exerciseMuscle.includes(targetMuscle.toLowerCase()) || targetMuscle.toLowerCase().includes(exerciseMuscle.split(' ')[0])) {\n          scores[exercise.id] += 15 * (analysis.confidence || 0.5);\n        }\n      });\n    });\n  }\n\n  // Score based on categories\n  if (analysis.categories) {\n    analysis.categories.forEach(targetCategory => {\n      exercises.forEach(exercise => {\n        if (exercise.category.toLowerCase().includes(targetCategory.toLowerCase())) {\n          scores[exercise.id] += 12 * (analysis.confidence || 0.5);\n        }\n      });\n    });\n  }\n\n  // Score based on difficulty\n  if (analysis.difficulty) {\n    analysis.difficulty.forEach(targetDifficulty => {\n      exercises.forEach(exercise => {\n        if (exercise.difficulty.toLowerCase() === targetDifficulty.toLowerCase()) {\n          scores[exercise.id] += 10 * (analysis.confidence || 0.5);\n        }\n      });\n    });\n  }\n\n  // Score based on equipment\n  if (analysis.equipment) {\n    analysis.equipment.forEach(targetEquipment => {\n      exercises.forEach(exercise => {\n        const exerciseEquipment = exercise.equipment.toLowerCase();\n        if (targetEquipment === 'none' && exerciseEquipment.includes('none') || exerciseEquipment.includes(targetEquipment.toLowerCase())) {\n          scores[exercise.id] += 10 * (analysis.confidence || 0.5);\n        }\n      });\n    });\n  }\n  return {\n    results: exercises.filter(exercise => scores[exercise.id] > 0).sort((a, b) => scores[b.id] - scores[a.id]),\n    scores,\n    analysis,\n    totalMatches: exercises.filter(exercise => scores[exercise.id] > 0).length\n  };\n};\n\n// Fallback smart search without OpenAI\nexport const smartSearchFallback = (query, exercises) => {\n  const patterns = {\n    muscleGroups: {\n      chest: ['chest', 'pecs', 'pectoral', 'bench'],\n      back: ['back', 'lats', 'latissimus', 'row', 'pull'],\n      legs: ['legs', 'quads', 'quadriceps', 'hamstrings', 'glutes', 'squat', 'lunge'],\n      shoulders: ['shoulders', 'delts', 'deltoids', 'press'],\n      arms: ['arms', 'biceps', 'triceps', 'curl'],\n      core: ['core', 'abs', 'abdominals', 'plank']\n    }\n  };\n  const queryLower = query.toLowerCase();\n  let scores = {};\n  exercises.forEach(exercise => {\n    scores[exercise.id] = 0;\n\n    // Basic text matching\n    if (exercise.name.toLowerCase().includes(queryLower)) {\n      scores[exercise.id] += 10;\n    }\n    if (exercise.description.toLowerCase().includes(queryLower)) {\n      scores[exercise.id] += 5;\n    }\n  });\n  return exercises.filter(exercise => scores[exercise.id] > 0).sort((a, b) => scores[b.id] - scores[a.id]);\n};\n\n// Check if OpenAI is available\nexport const isOpenAIAvailable = () => {\n  return !!process.env.REACT_APP_OPENAI_API_KEY;\n};","map":{"version":3,"names":["OpenAI","openai","apiKey","process","env","REACT_APP_OPENAI_API_KEY","dangerouslyAllowBrowser","EXERCISE_SEARCH_PROMPT","analyzeSearchQuery","query","response","chat","completions","create","model","messages","role","content","temperature","max_tokens","analysisText","choices","message","analysis","JSON","parse","success","originalQuery","parseError","console","warn","error","fallback","processExercisesWithAI","exercises","aiAnalysis","results","scores","forEach","exercise","id","muscleGroups","targetMuscle","exerciseMuscle","muscleGroup","toLowerCase","includes","split","confidence","categories","targetCategory","category","difficulty","targetDifficulty","equipment","targetEquipment","exerciseEquipment","filter","sort","a","b","totalMatches","length","smartSearchFallback","patterns","chest","back","legs","shoulders","arms","core","queryLower","name","description","isOpenAIAvailable"],"sources":["/Users/danielepauli/PycharmProjects/prometheus-exercise-library/client/src/services/openai.js"],"sourcesContent":["// OpenAI API Service for Exercise Search\nimport OpenAI from 'openai';\n\n// Initialize OpenAI client\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true // Only for development - move to backend in production\n});\n\n// System prompt for exercise search\nconst EXERCISE_SEARCH_PROMPT = `You are an expert fitness AI assistant specializing in exercise recommendations. \nYour job is to analyze natural language queries about exercises and return structured search parameters.\n\nGiven a user's search query, extract and return a JSON object with the following structure:\n{\n  \"intent\": \"exercise_search\",\n  \"muscleGroups\": [\"chest\", \"back\", \"legs\", \"shoulders\", \"arms\", \"core\", \"full body\"],\n  \"categories\": [\"strength\", \"bodyweight\", \"compound\", \"isolation\", \"explosive\", \"isometric\", \"cardio\"],\n  \"difficulty\": [\"beginner\", \"intermediate\", \"advanced\"],\n  \"equipment\": [\"none\", \"barbell\", \"dumbbell\", \"kettlebell\", \"machine\", \"cable\", \"resistance band\"],\n  \"keywords\": [\"specific\", \"exercise\", \"names\"],\n  \"searchTerms\": [\"processed\", \"search\", \"terms\"],\n  \"confidence\": 0.95\n}\n\nRules:\n1. Only include relevant fields that match the query\n2. Use exact values from the arrays above\n3. Include confidence score (0-1)\n4. If query is unclear, include multiple options\n5. Extract specific exercise names if mentioned\n6. Consider synonyms (e.g., \"pecs\" = chest, \"lats\" = back)\n\nExamples:\nQuery: \"chest exercises for beginners\"\nResponse: {\"muscleGroups\": [\"chest\"], \"difficulty\": [\"beginner\"], \"confidence\": 0.9}\n\nQuery: \"bodyweight exercises at home\"\nResponse: {\"equipment\": [\"none\"], \"categories\": [\"bodyweight\"], \"keywords\": [\"home\"], \"confidence\": 0.85}\n\nQuery: \"compound movements with barbell\"\nResponse: {\"categories\": [\"compound\"], \"equipment\": [\"barbell\"], \"confidence\": 0.9}`;\n\n// Analyze search query with OpenAI\nexport const analyzeSearchQuery = async (query) => {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-3.5-turbo\",\n      messages: [\n        {\n          role: \"system\",\n          content: EXERCISE_SEARCH_PROMPT\n        },\n        {\n          role: \"user\",\n          content: `Analyze this exercise search query: \"${query}\"`\n        }\n      ],\n      temperature: 0.3,\n      max_tokens: 300\n    });\n\n    const analysisText = response.choices[0].message.content;\n\n    try {\n      // Parse the JSON response\n      const analysis = JSON.parse(analysisText);\n      return {\n        success: true,\n        analysis,\n        originalQuery: query\n      };\n    } catch (parseError) {\n      console.warn('Failed to parse OpenAI response as JSON:', analysisText);\n      return {\n        success: false,\n        error: 'Invalid response format',\n        fallback: true\n      };\n    }\n\n  } catch (error) {\n    console.error('OpenAI API error:', error);\n    return {\n      success: false,\n      error: error.message,\n      fallback: true\n    };\n  }\n};\n\n// Process exercises using AI analysis\nexport const processExercisesWithAI = async (exercises, aiAnalysis) => {\n  let results = [...exercises];\n  let scores = {};\n\n  // Initialize scores\n  exercises.forEach(exercise => {\n    scores[exercise.id] = 0;\n  });\n\n  const analysis = aiAnalysis.analysis;\n\n  // Score based on muscle groups\n  if (analysis.muscleGroups) {\n    analysis.muscleGroups.forEach(targetMuscle => {\n      exercises.forEach(exercise => {\n        const exerciseMuscle = exercise.muscleGroup.toLowerCase();\n        if (exerciseMuscle.includes(targetMuscle.toLowerCase()) ||\n            targetMuscle.toLowerCase().includes(exerciseMuscle.split(' ')[0])) {\n          scores[exercise.id] += 15 * (analysis.confidence || 0.5);\n        }\n      });\n    });\n  }\n\n  // Score based on categories\n  if (analysis.categories) {\n    analysis.categories.forEach(targetCategory => {\n      exercises.forEach(exercise => {\n        if (exercise.category.toLowerCase().includes(targetCategory.toLowerCase())) {\n          scores[exercise.id] += 12 * (analysis.confidence || 0.5);\n        }\n      });\n    });\n  }\n\n  // Score based on difficulty\n  if (analysis.difficulty) {\n    analysis.difficulty.forEach(targetDifficulty => {\n      exercises.forEach(exercise => {\n        if (exercise.difficulty.toLowerCase() === targetDifficulty.toLowerCase()) {\n          scores[exercise.id] += 10 * (analysis.confidence || 0.5);\n        }\n      });\n    });\n  }\n\n  // Score based on equipment\n  if (analysis.equipment) {\n    analysis.equipment.forEach(targetEquipment => {\n      exercises.forEach(exercise => {\n        const exerciseEquipment = exercise.equipment.toLowerCase();\n        if ((targetEquipment === 'none' && exerciseEquipment.includes('none')) ||\n            exerciseEquipment.includes(targetEquipment.toLowerCase())) {\n          scores[exercise.id] += 10 * (analysis.confidence || 0.5);\n        }\n      });\n    });\n  }\n\n  return {\n    results: exercises.filter(exercise => scores[exercise.id] > 0).sort((a, b) => scores[b.id] - scores[a.id]),\n    scores,\n    analysis,\n    totalMatches: exercises.filter(exercise => scores[exercise.id] > 0).length\n  };\n};\n\n// Fallback smart search without OpenAI\nexport const smartSearchFallback = (query, exercises) => {\n  const patterns = {\n    muscleGroups: {\n      chest: ['chest', 'pecs', 'pectoral', 'bench'],\n      back: ['back', 'lats', 'latissimus', 'row', 'pull'],\n      legs: ['legs', 'quads', 'quadriceps', 'hamstrings', 'glutes', 'squat', 'lunge'],\n      shoulders: ['shoulders', 'delts', 'deltoids', 'press'],\n      arms: ['arms', 'biceps', 'triceps', 'curl'],\n      core: ['core', 'abs', 'abdominals', 'plank']\n    }\n  };\n\n  const queryLower = query.toLowerCase();\n  let scores = {};\n\n  exercises.forEach(exercise => {\n    scores[exercise.id] = 0;\n\n    // Basic text matching\n    if (exercise.name.toLowerCase().includes(queryLower)) {\n      scores[exercise.id] += 10;\n    }\n    if (exercise.description.toLowerCase().includes(queryLower)) {\n      scores[exercise.id] += 5;\n    }\n  });\n\n  return exercises\n    .filter(exercise => scores[exercise.id] > 0)\n    .sort((a, b) => scores[b.id] - scores[a.id]);\n};\n\n// Check if OpenAI is available\nexport const isOpenAIAvailable = () => {\n  return !!process.env.REACT_APP_OPENAI_API_KEY;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}